# Automatically generated on 2022-05-06 UTC from https://codemagic.io/app/600a00945662141a7e193e58/settings
# Note that this configuration is not an exact match to UI settings. Review and adjust as necessary.

workflows:
  # dev-(android):
  #   name: dev (Android)
  #   max_build_duration: 120
  #   environment:
  #     groups:
  #       - firestore_secrets_dev
  #       - keystore_credentials_dev
  #       - google_play_dev
  #     vars:
  #       CM_KEYSTORE_PATH: /tmp/keystore.keystore
  #       PACKAGE_NAME: 'com.aperezpe.bonobo'
  #       GOOGLE_PLAY_TRACK: 'beta'
  #     flutter: 2.2.3
  #     xcode: latest
  #     cocoapods: default
  #   triggering:
  #     events:
  #       - push
  #     branch_patterns:
  #       - pattern: '*dev*'
  #         include: true
  #         source: true
  #     tag_patterns:
  #       - pattern: '*'
  #         include: true
    
  #   scripts:
  #     - name: Setup Google Services
  #       script: |
  #         echo $ANDROID_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/android/app/google-services.json
  #     - name: Setup key properties
  #       script: |
  #         echo $CM_KEYSTORE | base64 --decode > /tmp/keystore.keystore
  #         cat >> "$CM_BUILD_DIR/android/key.properties" <<EOF
  #         storePassword=$CM_KEYSTORE_PASSWORD
  #         keyPassword=$CM_KEY_PASSWORD
  #         keyAlias=$CM_KEY_ALIAS
  #         storeFile=/tmp/keystore.keystore
  #         EOF
  #     - name: Set up local.properties
  #       script: |
  #         echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
  #     - name: Get Flutter packages
  #       script: |
  #         cd . && flutter packages pub get
  #     - name: Build App Bundle with Flutter
  #       script: |
  #         cd . && flutter build appbundle --release --build-name=1.0.1 --build-number=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks "$GOOGLE_PLAY_TRACK") + 1))
  #   artifacts:
  #     - build/**/outputs/bundle/**/*.aab
  #     - build/**/outputs/apk/**/*.apk
  #     - build/**/outputs/**/mapping.txt
  #     - flutter_drive.log
  #   publishing:
  #     slack:
  #       channel: '#bonobo'
  #       notify_on_build_start: true
  #       notify:
  #         success: true
  #         failure: false
  #     email:
  #       recipients:
  #         - aperezpe01@gmail.com
  #       notify:
  #         success: true
  #         failure: false
  #     google_play:
  #       credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
  #       track: $GOOGLE_PLAY_TRACK
  #       submit_as_draft: true
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    environment:
      vars:
        APPLE_ID: '1575798313'
      groups:
        - appstore_credentials
        # Add the above mentioned group environment variables in Codemagic UI (either in Application/Team variables): 
        # APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_KEY_IDENTIFIER
        # APP_STORE_CONNECT_PRIVATE_KEY Ã¥
        - signing_cert
        # CERTIFICATE_PRIVATE_KEY
        - firestore_secrets
      flutter: 2.2.3
      xcode: 13.4
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*dev*'
          include: true
          source: true
        - pattern: '*uat*'
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
    scripts:
      - name: Get flutter packages
        script: flutter pub get
      - name: Saves Firebase Google Services
        script: |
          # Set up google service file based on environment
          case "$CM_BRANCH" in
            main) IOS_FIREBASE_SECRET="$IOS_FIREBASE_SECRET" ;;
            *) IOS_FIREBASE_SECRET="$IOS_FIREBASE_SECRET_DEV" ;;
          esac

          echo $IOS_FIREBASE_SECRET | base64 --decode > $FCI_BUILD_DIR/ios/Runner/GoogleService-Info.plist
          
          # echo $IOS_FIREBASE_SECRET
      - name: Pod install
        script: find . -name "Podfile" -execdir pod install \;
      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Fetch signing files
        script: |
          # You can allow creating resources if existing are not found with `--create` flag
          # use --type IOS_APP_DEVELOPMENT together with development signing cert for DEVELOPMENT
          app-store-connect fetch-signing-files "$(xcode-project detect-bundle-id)" --type IOS_APP_STORE --create      
      - name: Set up signing certificate
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build ipa artifact
        # --build-name = CFBundleShortVersionString (Must be different if publishing to App Store)
        # --build-number = CFBundleVersion (Must be different for testing. This code will automatically update it)
        script: |
          # Get Build number for environment specific
          case "$CM_BRANCH" in
            main) IOS_BUILD_NUMBER=$(($(app-store-connect get-latest-app-store-build-number "$APPLE_ID") + 1)) ;;
            *) IOS_BUILD_NUMBER=$(($(app-store-connect get-latest-testflight-build-number "$APPLE_ID") + 1)) ;;
          esac

          echo Build number to release: $IOS_BUILD_NUMBER

          flutter build ipa --release --build-name=1.0.2 --build-number=$IOS_BUILD_NUMBER --export-options-plist=/Users/builder/export_options.plist 
      # - flutter build ios --debug --no-codesign
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      # ALL artifacts are publishable on test-flight or app-store, but I will only publish:
      #     App Store: main
      #     Test-Flight: Any Branch, but only on First Testerst. On External Testers only UAT

      # app_store_connect: # For iOS or macOS app
        # Configuration related to TestFlight (optional)
        # submit_to_testflight: true # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
        # beta_groups: # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
          # - First Testers
        
        # Configuration related to App Store (optional)
        # submit_to_app_store: false # Optional boolean, defaults to false. Whether or not to submit the uploaded build to App Store review. Note: This action is performed during post-processing.
        # release_type: MANUAL # Optional, defaults to MANUAL. Supported values: MANUAL, AFTER_APPROVAL or SCHEDULED
        # copyright: 2022 Gifterest # Optional. The name of the person or entity that owns the exclusive rights to your app, preceded by the year the rights were obtained.
      
      slack:
        channel: '#bonobo'
        notify_on_build_start: true
        notify:
          success: true
          failure: false
      email:
        recipients:
          - aperezpe01@gmail.com
        notify:
          success: true
          failure: false