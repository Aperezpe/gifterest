# Automatically generated on 2022-05-06 UTC from https://codemagic.io/app/600a00945662141a7e193e58/settings
# Note that this configuration is not an exact match to UI settings. Review and adjust as necessary.

workflows:
  android-workflow:
    name: Android workflow
    max_build_duration: 120
    environment:
      groups:
        - firestore_secrets
        - keystore_credentials
        - google_play_json_sec
        # GCLOUD_SERVICE_ACCOUNT_CREDENTIALS is the service account json file but encrypted
      vars:
        PACKAGE_NAME: 'com.aperezpe.bonobo'
        GOOGLE_PLAY_TRACK: 'beta'
        FCI_KEYSTORE_PATH: /tmp/upload_keystore.jks
        FCI_KEYSTORE: Encrypted(Z0FBQUFBQmltNHhXV0dpekhEQ2ZWb2lubTg5dkJ4R3NkOGwxMGlNOVU3elJGeWp3ajlqQU16bDdQeVZxazAwemtfbEJrVGlFbnRWenM2d3ZPNFhORVF6bHk5Snc5LTdhX2ZBbWExS1Y1Zi00d3ptQnpxaEJzYUNRQkwxNjE2ZzFKaWxMeTAzQW5Tclp2Q2pub2prVEo3dHN6NlhGcWVVSmVqaEZ4X2pKenMxSUVMSm4xbmt0MHZFQmtneGtvUEhtWDlMYW1Fa2o0SHZpTzRPckVJRVU4U25SNzk4alI5OHF3czZUUWxobHFlMmJMNUZUQWY0LThSOHlHSGVvcDJFcFk5UTdPRVE3a2loX3p5OWFEQjNfTGp2Zi1kTE15QWpEOXRZMU43dWtGYkVOU0hDR0xETzRRNUVfZGliVXlwTGVXOGRETS1OVzdUdkVMTHBpN0hGNVg1bEZYd1FQeU9wOTdUaGNWSktzYUtIYkRCWG1GVlp4U2xUT0VfZ0ROaEkwd2dIUTIxeGhwWWtsZkJWVUw1M2NHUVNpYlZZVGlZRzhLbDdPVWNRQ3A0MXhNQ3lvT3RSVWxLYlJjLVBmelNhMmxDSnZnYVI0TGpyZ1l3SzJoMHVVR3RUbkdINHJUTTFuWlhUODdpM3ItN1llM210NmpLWTU1RW9PRXFHREQ0VUNqVWpVdlVZVlhwdWFTOGl5ckd5UUdVSmFOMmdDTVZ6N2EzYXdHQkFaM0N4UnJrX1Y4TmlQVDlNeFZXTGJFbFRHT3JjSWVWbXRuejdSUHB0azFkM0pGLVN4RzA2X1JRQ1diTnR0UXhRazlyeHZqVURLNlI5YmotZWdBMFpoWTlKQWFIQmMyc2lZd05mcllpVi1qaG56SzNNbUhfRHQxTVhEdE5UbE5WQ0swbkhVb3FzSWp2MEdfcDNweTlSTV9tLTBSNnYtYlZzVlAtX2RqQ2ZOWDFFdFRqcGdGeDlOdWpmSnAtM0NlcjJ5UlJxZEJxZEM5dXFTLUMzWEEzb3kxU1U5b0ozeV9WLU13QW5EZTZ1TktUMV9sdTZuMlZBbGh1VlRXcFFXWXVIN2VoaTNiWGp4UDFGQ3dHd21DTy1vM0NxeEtleUo3czdWSW1pbjI2SE5CZzVJYmNqRjRMVk5iX2ltX2lBa2VLVmk0cnlVRVF4RWVpOWNSbjhpSV9pZWpMcG5EcG9SRFJLT2t2UWxsWmVyTnZnX25VRGtwbkw2Y1pjeWdKM3VhLTBDVXVmWDVxMXpabDNKYTNXLUN4R1hKX2V5QXZTdE5LQTVZaEJTVVE4SGhhME1SY3FCVk9DaE91WWJvOF85cmw4eXpXQU11RmdtRVpjUnBPaFdLQ2FFNVo5ZWV3TU1ndGhhUWRyRE05b1hJQzlsb05CbzhLZlJVdld6MXp0ek1DQ3hBR2xqdnBhRHgyRG5penlsTUV0ZUlFVzdNZGpQUmJjS2VZMGJrTXlmcmU2YnlfUTR0alhOSzdjeTBjS1ZYZHV2QWZoNUFEZUxMMzZqSmJyMkNJR3ZmeFlVSWhRVHFNcFZBUVh6S1JtcE1hY2FGUGNRdm5sOGdDTk5WRmhRR1hQY0tneE5LWkI1SlF2Z091WF9mYllQWDhPTnRoYkxWS0tadU9Jd19YWnZXTzluYVQ5bThfMV83eDA2WkpCUzBTMUVWMWFtYlZRcDlfeUkxRUVDWjhleVQweUhncUpHM1kyYkM4NmoxckU1MkdYbXRVd3lIRGQySzQ1WlliM0h5eVpUTHJMZHRfQml4MDRnZG1fQXVJdWViNzdYbFZkTGdXdGFEQm9TeEVDMFBnUkVzWFVYVFhPblB4ZFhTR1ZhXzVnWC10aW9zWUx5VDZJSVktS29UVDNYTXItMURGbnFRYjY4N2JlUkFHc0xyU0lEUWxlM1lEc1E4X3pSLUVlRDJIVzZFa2dkekpqenZxS0NsMUNudHFvc3NRYndoVkcwaVFweG5YM1h2aU1fTmR6M2ZmRU5TUzJTOVVLQmtncGxVeFYtZ0ZTUkhCVEZycG01Uk5uZ3JkbVdRb01FSkNXZVphc1pRMThUR1JrLXpNRXFrZTBoXzlxZm8zQXVmTzhiY2lxVFhtdUhBaGdRUmlrelA5SndnOG1LcjBMT1hpR2tyOTFzREdVVVNZZXEtSXoxWE5oLUk5WjhONk1VMENUcm9oRVZ0TDBVMlF6WXZpUzE2X2hjRkp4cWM2emRqYThINU9RTkxHYVpzUl9uZVl3ODBTLTRJWkg4TUFiUHJRbF80ZkI2WmlTbjFlT3hwSm9xZzRCdllsSDhJUzFaTGRRRUV3bDN0U0FiTG1lazFOREJXbFd4LTFCQ3VfZjVaVGNVTlFqMVktdmVvYXB1bnpudWxzc3ZSYjlpVVdKaHVHcllxdXphOFVxd1JLblY0by1NZGtNRFNXdWxhd2NORHRoS2dtZGJTYU5KU0Jlb2hyaThQTHlFUUZXNDFHbXZRcDcyUVVySGJmRXBrNlJ3N2tmUFU4ekNRRzBtUUhhc2l6ZjE4cl9uN3p6X1hOY3B6aU9WaTZCUm9WcWtEMW5DcFBRT3pfMVhSbjhGV0MydDNSeGhKNlIwNlM3YkdDUjM5dmdMSDBVVlNxQ0VIMjBvOU5SZ1l1VWc0RUlWTUFLb0JVZUgzbjctRW5MOENrdTAzLVhjSTRNOE9rcE5ZZWZGaFNCV0w3Tk9ULVR3NmVLdjJlUHpkc1dTb2x4eU02T2hsYVZFM3czQmRYY01HZXFsaXR3Y3cxSVoxRmtmbmYtWUlxcGdnUXRCakdMaE9QVjg2cGtTelF0VTlUTncyNWk4emZuMTZVMlRqeDQ3dTFXdTZGQWpVQUJIRlZod1cxc21MV0kycGE2YU02MnBmQ3BRa2lOLWpTRHgtUVl0bVpWdy1TemYtTEhNME9oT01CaUQzaUhxLXZJSy1oZ0NqZnFhN0l2OVBHcFpJYWRuV0dvQW1MZ3VXRllfUUxnNmYyUUI3YTBUY0lVbXhYYjVmdDNVd1ZNQzgxQlVHUzJRa1JRaG9Vc1lieGE4b3dtVFFRU2Z6ckVMYll5cHJnWnlROEtRR3JDOGZiTFAwdlVPV0l2ZGVXNlI0M2QyZnpmZjA0S0JHOU5MbzFwZTc4VmxmMWl6ZTk0ZTVXcXVQd1ZMajRYOGRfMGlVY2ZoNU9DWDYzemZHNlFYV2hSQlFpODZsVkowUzZodHN5X3pUUUVCaDU5aDI5Z25Qc2tCR0lYUjdTZXBUUllYOC1SNVUyeXphX0xiNHZ4bnUtVjFocFJXVmx1UnlKY252VC0xdm9ZZ2Z2eXROUWx0d1J4dnB0VTF5NERMSVZkQkZmTVYwUzM3VTNnQ3ZYempsQlAtcEVNZVpFRDBNUXNGQjEzSUNRWlZMUldMbElwMC1WR0Y0bWduRVNmNGU0WHlsUXVKdlA1bllJdjNqNmg2aWtfaFBadVIzZUdPVXBDenR4bmVqY0JtaWgwOUNfbjFyQjZjdUlsZ0cyZ1hkQ3BvYlZfbkxxdE0wR1ZHeXJiNjBtdlhXTGs3OHR1NGFPMEM3WUZ3Q2JXS2F1MmxVeFlmTmJCTUctT21UclJTOVp3Rm5yME9ETVdZZTZ6dGRXRXZHTUJaVlpCMF9ZYkRoSXRDYTZlcnZfQnNuRFdiQ19iZ1I2NXV5Xy1RNFdNSG84LWNJTlI2VzBXWkpYa2NleDNaSUxsaFNXaTZ3bVdLaHZqZTBZZW5qb1BVVHpoRXgzekxaYm5ic04wQlhYWGIzellVOE9KYU80c1NmRXlLcnBzRGFOMU9QNUxyQ1FNTE1WUUtZVHp6UXJ3Q3kxNWZ6em5ybzY2QzlmamhyTk5FcWVXY1dTb1BaaklrVURyRjUwamhjdU5uemswaUZtMWxBVHVEaE9weG00R1dmSTNyQUp6elg1RW9ZdzdtTlZWSUY2UU8yemp3S2hhWDFwMTJVWmFvT1hzbVBfNHljUkxCNzkyaHdaNXNTaXBVMmtIaGtubGx6cVpndnBXRU50MkxPc1h2Y0NqTFY5eGZEVmlNR05QOWQteXk4UkdkMTRsQ2djTVdrN1REaWhPSEl0ZGZtUEpIcnlnUDFOSUoxQ0xNNjNrY2ZraGo3WjBwa0VVZVhYbExNUVk4UnpjQ0NFVjZTQkstZlFSSUE3bnI1bF9kSmJ4OVM0M1NOUnRTREF5UUN6WGdwVENRX2Zpd3hTYkJYUzlCNms0eEFDamlFMmFPZ05ZZVF3TDhJeDI2NlotYUNUZGZlU1NoRDBERDJyYmRqVUE5cU5hZUFVV013ZHI4RzVpVkhISkNHN0UtU3RyUHc4bzBkaEItNjhpcllaY3VhaEZDcExHLUR3d25EOE1sam9mU0prdDRmYzJjUTZuOElYVVVYSkQtMkdPYWtxRVdQQjYtQkl0R0RRaVdlcHVQeDFUNWY2WHZjMzBrNVM2RVl0a1NoR09jbFlpaHBSS09FaWtBaHlUc1lfMjVZeUNrNnJjOXFaV0xCV1RLWjkwY1RYeTZpck96cElheUNhb0VYWXJKTE9YR2VOMWYyX3hFaHhxSWlDZmJ3RWtQSHdvaHB0Zi1MY0dySjlfTldvcy1TVG1DdHRSdFZSLXAzWS1KMUtES09PVVQ4OGJic0VMTFlVbU82REZ4cEd1YnUxXzNhUm14R1B6OU5tNEE5VnRvdFVLOWlVa0NyNWFKUkdCZHl3bjZEU2U1YVZ6LTdfOFM5NzFMNnZPUlMtU3c3aVM0c1lCOEVxd216a2RhcjJ4NHhoc09TMEhyejZHVzFrNFVBTDVqRGk4cm4xaWNCb1MwM3hGblFJVWVtQS1zX0I0MDVxNEVSTFRfcklNSmtlcy1pLThqMVdVejRjRjRmaVhQcHBKekY5THZ4T1o1TWNZOUxhWjE2YUlydkRHZGRRbXk4ZXF0NlZ1Q3ZQdTZfak5UeWtSbTZvRGF6Z01lenM2YjEwV1ZvRE5TZVpncUNNejRiN25tVEUzNFBFMENhc0RrTFhzQWNmRXNVbTZBbUNldk1jdVppOW50cjdqSEJVVVVCTkNMOU1DX2d3MmlkU0JNWGRLU19sbEstSFVSM0xfS2xtdU14QkV5OGZ4OUFGRnZReGkwckhIR3JNTjhGNThRTnRRNWFqZEFxd3poNmxOcHJiN2p0ZEpMN2NQekxGMnNqVnN3U2RCSzR3M25PY3h3Vm84eVRPb2xEN0VFYnc3TFVnZDNxU24wdGtBWUxsc2VseXFsR0dWVTlVUnpZaTNLWHlwa0lJSGduZkFsTE1pMGVRUDJ3Z0k2aWV4akxsQ05ubTRzLXN6VzdrTEVuOV9IbmEwNkVMN0ZZU29fbjJSUkx5eG5zY00zR1JBZS1QaDJKYmZ1czdDY3ZBVHdrRy1PNVpSZ2lBTk9MMjZWYnB3bXJvTkpLR1dwX1VrbmY0NGRBeVowSnN5OU10MHlpdUJ0QWJTZnVYNnJ3N2l1TVFoSl9taUpabjBTQ1hCaWRlUUtfTXRfZnFKZzZTOGpnd1o2Z2F0WjFjM1RtMVlqU3BSelBmdUE2LWRySnRPS29iN1REUndoMm1BUTNwZU1DMGVIcjctbXpnbkhucjIzdmVoa1oxYU1uc1ZodWxnVU5tTG9FbEpGdjdTRVBXOXpKMGpHd1ZaODBFOHpoel9kcTB0dHFIdEJhQjRBRG1LOWxRUXRKY1hlMWh4Q3JGbWNvOWtDZ2hILWxMUXoyTkRzZkxyZHNEbkFjdV83aUJQM3hmNFZZZnptQnBkcE5kSWV4NVJjbnBvUk15czFaU0VBSUw2OVhWRDZmOEV4UXhGV0E2VXhQY2dUYmZoS1pGd3RzT1g3c1oydy1YMWhGTWFNek1qRVdSdm45WnBHcnNFR001Vi0yQWJVTm10MGo4by1QYlh6WFlHb3k5ekZ6MGZyUHlKNkpPRXVJWlpzYU5jWWRicGJZMElTRjZWSEp1NTRIYVdLWjE3ZXB4RkJCRkE3Mi1tUkpBTTdxd1JQQ1F2eW1iVk54TE51NnNvQzZIOWZTNUFCdGY4Q2ppT2d2RlVOZnJjb1JNTEQzd0EzenB0eHBOby1QaDBnbFBJNnBfekpjZjRZcktMcjVadEFEMnA4MW4yTEk5d1d0c29vdXlrZkdEWUh1REdhcDRvRFJxSThxMTJzY3pUNzBReHpGcWN3d0xvcUUyQUVLdmo3RG1GNTY4Q1dNWUVoVWQ3bzJpVlptUjRqZ0pGTHRCSVdYVVdxS3VOSFd6dTJCTXZVazVWMTREdkV0bWNZa05wSnhHWUMydmpfSnJfWW0wUzhmaXdYOUU5Wm8yM2dNTF9ET1B1MHIwZDdEUXZqdm5FZXlQTmVhNkMwTER5ek82YlVsbzRwNnEyRTgxc3ZCcWc5SnJSWnY0RjJyXzBYT195alJoUUNWRWFXbGJGdHZmbkVJMGFkQlRkLWZCSGJ3U1VIZ0V4RnhQOHRkMThVV0RxUnM4MzZKYlR4UExJWFBkV3dDRDlXT0NXVEVkLTNMaHh6aDc1TW9GZGFabVA1V2tucjNFUTBEM0VJU2Qtcmp2OWx2Q05XQkNnSmExVVZwTXFjQ2RKalV4RF8xbFZBTExQdmVfM0ppSm9WWWpnUU11ZklZNjdIVk0xUXdHWDBfWGlDZUtqcklkQzJ2U1BVRTY4R185V2p4XzdvcG14UUMyT0Z5cGsz)
        FCI_KEYSTORE_PASSWORD: Encrypted(Z0FBQUFBQmltNHhXbWpkbGRic0psYWFpdnZqT050aGpIQTNxUzdFd3hGaXZDS2JZMXoxd0xPUFBHS0dKMk9JVnlzVnhTdmw4R0RHWE44VkctbHdTS05FT3FYZk5ldFpFdFE9PQ==)
        FCI_KEY_PASSWORD: Encrypted(Z0FBQUFBQmltNHhXc2pkZmlicmdWa1BqUFpUbEt0eE1pSkRQRkszX1hWcFNnWVAwOUJBdWxXYnZNUmlXczZoOXZwNU9QX2dsN00zSFBmOFl1OEJQeTBYa1IyV0JjSU5UQ2c9PQ==)
        FCI_KEY_ALIAS: Encrypted(Z0FBQUFBQmltNHhXa0kzNm00clJmbWRGeDVKdVduRHVOTHQ4RWZucWlNZy1jOUN1dXozdWU1QnRSMnFVRlptZi1YeDlPbHZIR1hfdG16Y2d2LW9wNVNJNDhqUV91cWdDNnc9PQ==)
      flutter: 2.2.3
      xcode: 13.4
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*dev*'
          include: true
          source: true
      tag_patterns:
        - pattern: '*'
          include: true
    
    scripts:
      - name: Set up key properties
        script: |
          # set up key.properties
          echo $FCI_KEYSTORE | base64 --decode > $FCI_KEYSTORE_PATH
          cat >> "$FCI_BUILD_DIR/android/key.properties" <<EOF
          storePassword=$FCI_KEYSTORE_PASSWORD
          keyPassword=$FCI_KEY_PASSWORD
          keyAlias=$FCI_KEY_ALIAS
          storeFile=$FCI_KEYSTORE_PATH
          EOF
      - name: Setup Google Services
        script: |
          # TODO: This script will ONLY work with prod and dev branches. Any other branch will fail this step.
          # I can later make this step always create a dev directory if I want it to work with any branch.

          # Set up google service file based on environment
          case "$CM_BRANCH" in
            main) ANDROID_FIREBASE_SECRET="$ANDROID_FIREBASE_SECRET" ;;
            *) ANDROID_FIREBASE_SECRET="$ANDROID_FIREBASE_SECRET_DEV" ;;
          esac

          # Creates directory to output GoogleService-Info.plist
          mkdir -p $FCI_BUILD_DIR/android/app/src/$CM_BRANCH

          echo $ANDROID_FIREBASE_SECRET | base64 --decode > $CM_BUILD_DIR/android/app/src/$CM_BRANCH/google-services.json
      - name: Set up local.properties
        script: |
          echo "flutter.sdk=$HOME/programs/flutter" > "$CM_BUILD_DIR/android/local.properties"
      - name: Get Flutter packages
        script: |
          cd . && flutter packages pub get
      - name: Build App Bundle with Flutter
        script: |
          cd . && flutter build appbundle \
          --flavor $CM_BRANCH \
          --release --build-name=1.0.1 \
          --build-number=$(($(google-play get-latest-build-number --package-name "$PACKAGE_NAME" --tracks "$GOOGLE_PLAY_TRACK") + 1)) \
          --target=$FCI_BUILD_DIR/lib/main_$CM_BRANCH.dart
    artifacts:
      - build/**/outputs/bundle/**/*.aab
      - build/**/outputs/apk/**/*.apk
      - build/**/outputs/**/mapping.txt
      - flutter_drive.log
    publishing:
      slack:
        channel: '#bonobo'
        notify_on_build_start: true
        notify:
          success: true
          failure: false
      email:
        recipients:
          - aperezpe01@gmail.com
        notify:
          success: true
          failure: false
      # google_play:
      #   credentials: $GCLOUD_SERVICE_ACCOUNT_CREDENTIALS
      #   track: $GOOGLE_PLAY_TRACK
      #   submit_as_draft: true
  ios-workflow:
    name: iOS Workflow
    max_build_duration: 120
    environment:
      vars:
        APPLE_ID: '1575798313'
      groups:
        - appstore_credentials
        # APP_STORE_CONNECT_ISSUER_ID
        # APP_STORE_CONNECT_KEY_IDENTIFIER
        # APP_STORE_CONNECT_PRIVATE_KEY å
        - distribution_signing_cert
        # CERTIFICATE_PRIVATE_KEY
        - firestore_secrets
      flutter: 2.2.3
      xcode: 13.4
      cocoapods: default
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: '*dev*'
          include: true
          source: true
        # - pattern: '*uat*'
        #   include: true
        #   source: true
      tag_patterns:
        - pattern: '*'
          include: true
    scripts:
      - name: Get flutter packages
        script: flutter pub get
      - name: Saves Firebase Google Services
        script: |
          # Set up google service file based on environment
          case "$CM_BRANCH" in
            main) IOS_FIREBASE_SECRET="$IOS_FIREBASE_SECRET" ;;
            *) IOS_FIREBASE_SECRET="$IOS_FIREBASE_SECRET_DEV" ;;
          esac

          # Creates directory to output GoogleService-Info.plist
          mkdir -p $FCI_BUILD_DIR/ios/config/$CM_BRANCH

          echo $IOS_FIREBASE_SECRET | base64 --decode > $FCI_BUILD_DIR/ios/config/$CM_BRANCH/GoogleService-Info.plist
      - name: Pod install
        script: find . -name "Podfile" -execdir pod install \;
      - name: Set up keychain to be used for code signing using Codemagic CLI 'keychain' command
        script: keychain initialize
      - name: Fetch signing files
        script: |
          # You can allow creating resources if existing are not found with `--create` flag
          # use --type IOS_APP_DEVELOPMENT together with development signing cert for DEVELOPMENT
          app-store-connect fetch-signing-files "$(xcode-project detect-bundle-id)" --type IOS_APP_STORE --create      
      - name: Set up signing certificate
        script: keychain add-certificates
      - name: Set up code signing settings on Xcode project
        script: xcode-project use-profiles
      - name: Build ipa artifact
        # --build-name = CFBundleShortVersionString (Must be different if publishing to App Store)
        # --build-number = CFBundleVersion (Must be different for testing. This code will automatically update it)
        script: |
          # Get Build number for environment specific
          case "$CM_BRANCH" in
            main) IOS_BUILD_NUMBER=$(($(app-store-connect get-latest-app-store-build-number "$APPLE_ID") + 1)) ;;
            *) IOS_BUILD_NUMBER=$(($(app-store-connect get-latest-testflight-build-number "$APPLE_ID") + 1)) ;;
          esac

          echo Build number to release: $IOS_BUILD_NUMBER

          echo target on: $FCI_BUILD_DIR/lib/main_$CM_BRANCH.dart

          echo with flavor: $CM_BRANCH 

          flutter build ipa --flavor $CM_BRANCH --release --build-name=1.0.2 --build-number=$IOS_BUILD_NUMBER --export-options-plist=/Users/builder/export_options.plist --target=$FCI_BUILD_DIR/lib/main_$CM_BRANCH.dart
      # - flutter build ios --debug --no-codesign
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - flutter_drive.log
    publishing:
      # ALL artifacts are publishable on test-flight or app-store, but I will only publish:
      #     App Store: main
      #     Test-Flight: Any Branch, but only on First Testerst. On External Testers only UAT

      # app_store_connect: # For iOS or macOS app
        # Configuration related to TestFlight (optional)
        # submit_to_testflight: true # Optional boolean, defaults to false. Whether or not to submit the uploaded build to TestFlight beta review. Required for distributing to beta groups. Note: This action is performed during post-processing.
        # beta_groups: # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
          # - First Testers
        
        # Configuration related to App Store (optional)
        # submit_to_app_store: false # Optional boolean, defaults to false. Whether or not to submit the uploaded build to App Store review. Note: This action is performed during post-processing.
        # release_type: MANUAL # Optional, defaults to MANUAL. Supported values: MANUAL, AFTER_APPROVAL or SCHEDULED
        # copyright: 2022 Gifterest # Optional. The name of the person or entity that owns the exclusive rights to your app, preceded by the year the rights were obtained.
      
      slack:
        channel: '#bonobo'
        notify_on_build_start: true
        notify:
          success: true
          failure: false
      email:
        recipients:
          - aperezpe01@gmail.com
        notify:
          success: true
          failure: false